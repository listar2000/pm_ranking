src.pm_rank
===========

.. py:module:: src.pm_rank

.. autoapi-nested-parse::

   `pm_rank`: A toolkit for scoring and ranking prediction market forecasters.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/src/pm_rank/data/index
   /autoapi/src/pm_rank/model/index


Classes
-------

.. autoapisummary::

   src.pm_rank.ForecastEvent
   src.pm_rank.ForecastProblem
   src.pm_rank.ForecastChallenge
   src.pm_rank.ChallengeLoader
   src.pm_rank.GJOChallengeLoader
   src.pm_rank.ProphetArenaChallengeLoader
   src.pm_rank.GeneralizedBT
   src.pm_rank.BrierScoringRule
   src.pm_rank.LogScoringRule
   src.pm_rank.SphericalScoringRule
   src.pm_rank.AverageReturn
   src.pm_rank.CalibrationMetric


Functions
---------

.. autoapisummary::

   src.pm_rank.spearman_correlation
   src.pm_rank.kendall_correlation


Package Contents
----------------

.. py:class:: ForecastEvent

   Bases: :py:obj:`pydantic.BaseModel`


   Individual forecast from a user for a specific problem.


   .. py:attribute:: forecast_id
      :type:  str


   .. py:attribute:: problem_id
      :type:  str


   .. py:attribute:: username
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime


   .. py:attribute:: probs
      :type:  List[float]


   .. py:attribute:: unnormalized_probs
      :type:  Optional[List[float]]


   .. py:attribute:: weight
      :type:  float


   .. py:method:: validate_weight(v)

      Validate that weight is non-negative.



   .. py:method:: validate_probabilities(v)

      Validate that probabilities sum to 1 and are non-negative.



   .. py:method:: set_unnormalized_probs_default()

      Set unnormalized_probs to probs if not provided.



   .. py:method:: validate_unnormalized_probabilities(v)

      Validate that unnormalized probabilities are non-negative.
      we only require every number to be in [0, 1], and the vector dimension is the same as the number of options.



.. py:class:: ForecastProblem

   Bases: :py:obj:`pydantic.BaseModel`


   A prediction problem with multiple options and forecasts.


   .. py:attribute:: title
      :type:  str


   .. py:attribute:: problem_id
      :type:  str


   .. py:attribute:: options
      :type:  List[str]


   .. py:attribute:: correct_option_idx
      :type:  List[int]


   .. py:attribute:: forecasts
      :type:  List[ForecastEvent]


   .. py:attribute:: end_time
      :type:  datetime.datetime


   .. py:attribute:: num_forecasters
      :type:  int


   .. py:attribute:: url
      :type:  Optional[str]


   .. py:attribute:: odds
      :type:  Optional[List[float]]


   .. py:attribute:: no_odds
      :type:  Optional[List[float]]


   .. py:attribute:: category
      :type:  Optional[str]


   .. py:method:: validate_correct_option_idx(v, info)

      Validate that correct_option_idx is in the options list.



   .. py:method:: validate_forecasts(v, info)

      Validate that all forecasts have (1) correct number of probabilities, (2) unique `forecast_id`.



   .. py:method:: validate_odds(v, info)

      Validate that odds match the number of options if provided.



   .. py:method:: smooth_odds()

      Smooth the odds to not be too close to 0 or 1.
              



   .. py:property:: has_odds
      :type: bool


      Check if the problem has odds data.



   .. py:property:: has_no_odds
      :type: bool


      Check if the problem has no_odds data.



   .. py:property:: crowd_probs
      :type: List[float]


      Calculate crowd probabilities from the forecasts.



   .. py:property:: unique_forecasters
      :type: List[str]


      Get list of unique forecasters for this problem.



   .. py:property:: option_payoffs
      :type: List[Tuple[int, float]]


      Obtain a sorted list of (option_idx, payoff) for this problem.
      The payoff is the (1 / odds) for a correct option, and 0 for an incorrect option.



.. py:class:: ForecastChallenge

   Bases: :py:obj:`pydantic.BaseModel`


   A collection of forecast problems with validation and computed properties.


   .. py:attribute:: title
      :type:  str


   .. py:attribute:: forecast_problems
      :type:  List[ForecastProblem]


   .. py:attribute:: categories
      :type:  Optional[List[str]]


   .. py:method:: validate_problems(v)

      Validate that there are problems and they have unique IDs.



   .. py:method:: validate_categories(v, info)

      Validate that categories are a list of strings.



   .. py:property:: forecaster_map
      :type: Dict[str, List[ForecastEvent]]


      Map from forecaster username to their forecasts across all problems.



   .. py:property:: num_forecasters
      :type: int


      Total number of unique forecasters across all problems.



   .. py:property:: unique_forecasters
      :type: List[str]


      List of unique forecaster usernames.



   .. py:property:: problem_option_payoffs
      :type: Dict[str, List[Tuple[int, float]]]


      Map from problem_id to a sorted list of (option_idx, payoff) for this problem.



   .. py:method:: get_forecaster_problems(username: str) -> List[ForecastProblem]

      Get all problems that a specific forecaster participated in.



   .. py:method:: get_problem_by_id(problem_id: str) -> Optional[ForecastProblem]

      Get a specific problem by its ID.



   .. py:method:: get_problems(nums: int = -1) -> List[ForecastProblem]

      Get a list of problems. If nums is -1, return all problems.



   .. py:method:: stream_problems(order: Literal['sequential', 'random', 'time'] = 'sequential', increment: int = 100) -> Iterator[List[ForecastProblem]]

      Stream the problems in the challenge. Either by random or by the problem end time.

      Args:
          order: The order in which to stream the problems.
          increment: The number of problems to stream in each iteration.

      Returns:
          An iterator of lists of problems.



   .. py:method:: stream_problems_over_time(increment_by: Literal['day', 'week', 'month'] = 'day', min_bucket_size: int = 1) -> Iterator[Tuple[str, List[ForecastProblem]]]

      Stream all problems in chronological buckets.



   .. py:method:: fill_problem_with_fair_odds(force: bool = False) -> None

      Certain challenge do not have odds data, we can fill in fair/uniform odds for each problem.
      If `force` is True, we will not check whether the problem already has odds data.



.. py:class:: ChallengeLoader

   Bases: :py:obj:`abc.ABC`


   Abstract base class for loading forecast challenges from different data sources.
   This separates the loading logic from the data model.


   .. py:method:: load_challenge() -> ForecastChallenge
      :abstractmethod:


      Load and return a ForecastChallenge from the data source.



   .. py:method:: get_challenge_metadata() -> Dict[str, Any]
      :abstractmethod:


      Get metadata about the challenge without loading all data.



.. py:class:: GJOChallengeLoader(predictions_df: Optional[pandas.DataFrame] = None, predictions_file: Optional[str] = None, metadata_file: Optional[str] = None, challenge_title: str = '')

   Bases: :py:obj:`src.pm_rank.data.base.ChallengeLoader`


   Load forecast challenges from GJO (Good Judgment Open) data format.

   Initialize the GJOChallengeLoader. The challenge can be either loaded with a given `pd.DataFrame` or with             a combination of paths `predictions_file` and `metadata_file`.

   Args:
       predictions_df (pd.DataFrame): a pd.DataFrame containing the predictions. If provided,                 `predictions_file` and `metadata_file` will be ignored.
       predictions_file (str): the path to the predictions file
       metadata_file (str): the path to the metadata file
       challenge_title (str): the title of the challenge


   .. py:attribute:: challenge_title
      :value: ''



   .. py:attribute:: logger


   .. py:method:: load_challenge(forecaster_filter: int = 0, problem_filter: int = 0) -> src.pm_rank.data.base.ForecastChallenge

      Load challenge data from GJO format files.

      Args:
          forecaster_filter: minimum number of events for a forecaster to be included
          problem_filter: minimum number of events for a problem to be included

      Returns:
          ForecastChallenge: a ForecastChallenge object containing the forecast problems and events



   .. py:method:: get_challenge_metadata() -> Dict[str, Any]

      Get basic metadata about the GJO challenge.



.. py:class:: ProphetArenaChallengeLoader(predictions_df: Optional[pandas.DataFrame] = None, predictions_file: Optional[str] = None, challenge_title: str = '', use_bid_for_odds: bool = False, use_open_time: bool = False)

   Bases: :py:obj:`src.pm_rank.data.base.ChallengeLoader`


   Load forecast challenges from Prophet Arena data format.

   Initialize the ProphetArenaChallengeLoader.

   The challenge can be either loaded with a given `pd.DataFrame` or with a path to a predictions file.

   :param predictions_df: A pd.DataFrame containing the predictions. If provided, `predictions_file` will be ignored.
   :param predictions_file: The path to the predictions file.
   :param challenge_title: The title of the challenge.
   :param use_bid_for_odds: Whether to use the `yes_bid` field for implied probability calculation.
                           If True, the implied probability will be calculated as the (yes_bid + no_bid) / 2.
                           If False, the implied probability will be simply `yes_ask` (normalized to sum to 1).
   :param use_open_time: Whether to use the `open_time` field for the `end_time` of the problem.
                           If True, the `end_time` will be the `open_time` of the problem.
                           If False, the `end_time` will be the `close_time` of the problem.


   .. py:attribute:: challenge_title
      :value: ''



   .. py:attribute:: use_bid_for_odds
      :value: False



   .. py:attribute:: use_open_time
      :value: False



   .. py:attribute:: logger


   .. py:method:: load_challenge(add_market_baseline: bool = False) -> src.pm_rank.data.base.ForecastChallenge

      Load challenge data from Prophet Arena data format.
      Group by submission_id, then for each group, build the list of forecasts, then the ForecastProblem.

      :param add_market_baseline: Whether to add the market baseline as a forecaster
      :return: A ForecastChallenge object containing the forecast problems and events.



   .. py:method:: get_challenge_metadata() -> Dict[str, Any]

      Get basic metadata about the Prophet Arena challenge using pandas groupby (no full parsing).



.. py:class:: GeneralizedBT(method: Literal['MM', 'Elo'] = 'MM', num_iter: int = 100, threshold: float = 0.001, verbose: bool = False)

   Bases: :py:obj:`object`


   Generalized Bradley-Terry model for ranking forecasters in prediction markets.

   This class implements a generalization of the traditional Bradley-Terry model to
   handle prediction market scenarios. Each event outcome is treated as a contest
   between two "pseudo-teams": a winning team (the realized outcome) and a losing
   team (all other outcomes). Each forecaster contributes fractions of their capability
   proportional to their predicted probabilities.

   The model estimates skill parameters for each forecaster using an iterative
   Majorization-Minimization (MM) algorithm, which provides convergence guarantees
   and intuitive comparative scores similar to Elo ratings.

   :param method: Optimization method to use ("MM" for Majorization-Minimization).
   :param num_iter: Maximum number of iterations for the MM algorithm (default: 100).
   :param threshold: Convergence threshold for parameter updates (default: 1e-3).
   :param verbose: Whether to enable verbose logging (default: False).

   Initialize the generalized Bradley-Terry model.

   :param method: Optimization method to use ("MM" for Majorization-Minimization).
   :param num_iter: Maximum number of iterations for the MM algorithm (default: 100).
   :param threshold: Convergence threshold for parameter updates (default: 1e-3).
   :param verbose: Whether to enable verbose logging (default: False).


   .. py:attribute:: method
      :value: 'MM'



   .. py:attribute:: num_iter
      :value: 100



   .. py:attribute:: threshold
      :value: 0.001



   .. py:attribute:: verbose
      :value: False



   .. py:attribute:: logger


   .. py:method:: fit(problems: List[pm_rank.data.base.ForecastProblem], include_scores: bool = True) -> Tuple[Dict[str, Any], Dict[str, int]] | Dict[str, int]

      Fit the generalized Bradley-Terry model to the given problems.

      This method estimates skill parameters for each forecaster using the MM algorithm
      and returns rankings based on these parameters. The skill parameters represent
      the relative predictive ability of each forecaster.

      :param problems: List of ForecastProblem instances to evaluate.
      :param include_scores: Whether to include scores in the results (default: True).

      :returns: Ranking results, either as a tuple of (scores, rankings) or just rankings.



.. py:class:: BrierScoringRule(negate: bool = True, verbose: bool = False)

   Bases: :py:obj:`ScoringRule`


   Brier scoring rule for evaluating probabilistic forecasts.

   The Brier score is a quadratic proper scoring rule that measures the squared
   difference between predicted probabilities and actual outcomes. It is widely
   used in prediction markets and provides a good balance between rewarding
   accuracy and calibration.

   :param negate: Whether to negate the scores so that higher values are better
                  (default: True).
   :param verbose: Whether to enable verbose logging (default: False).

   Initialize the Brier scoring rule.

   :param negate: Whether to negate the scores so that higher values are better
                  (default: True).
   :param verbose: Whether to enable verbose logging (default: False).


   .. py:attribute:: negate
      :value: True



.. py:class:: LogScoringRule(clip_prob: float = 0.01, verbose: bool = False)

   Bases: :py:obj:`ScoringRule`


   Logarithmic scoring rule for evaluating probabilistic forecasts.

   The logarithmic scoring rule is a proper scoring rule that rewards forecasters
   based on the logarithm of their predicted probability for the actual outcome.
   This rule heavily penalizes overconfident predictions and rewards well-calibrated
   forecasts.

   :param clip_prob: Minimum probability value to prevent log(0) (default: 0.01).
   :param verbose: Whether to enable verbose logging (default: False).

   Initialize the logarithmic scoring rule.

   :param clip_prob: Minimum probability value to prevent log(0) (default: 0.01).
   :param verbose: Whether to enable verbose logging (default: False).


   .. py:attribute:: clip_prob
      :value: 0.01



.. py:class:: SphericalScoringRule(verbose: bool = False)

   Bases: :py:obj:`ScoringRule`


   Spherical scoring rule for evaluating probabilistic forecasts.

   The spherical scoring rule normalizes probability vectors to unit vectors and
   measures the cosine similarity with the actual outcome. This rule is less
   sensitive to extreme probability values compared to the logarithmic rule.

   :param verbose: Whether to enable verbose logging (default: False).

   Initialize the spherical scoring rule.

   :param verbose: Whether to enable verbose logging (default: False).


.. py:class:: AverageReturn(num_money_per_round: int = None, risk_aversion: float = None, use_approximate: bool = None, break_tie_by_uniform: bool = None, use_binary_reduction: bool = None, verbose: bool = False, config: AverageReturnConfig = None, bootstrap_ci_config: pm_rank.model.utils.BootstrapCIConfig = DEFAULT_BOOTSTRAP_CI_CONFIG)

   Average Return Model for ranking forecasters based on their expected market returns.

   This class implements a ranking algorithm that evaluates forecasters based on how much
   money they could earn from prediction markets using different risk aversion strategies.
   The model calculates expected returns for each forecaster and ranks them accordingly.

   Initialize the AverageReturn model.

   :param num_money_per_round: Amount of money to bet per round (default: 1).
   :param risk_aversion: Risk aversion parameter between 0 and 1 (default: 0.0).
   :param use_approximate: Whether to use the approximate CRRA betting strategy (default: False).
   :param break_tie_by_uniform: When the edges are all the same, 
       whether to break tie by spending uniform money on each leg. Only effective when use_approximate is True (default: True).
   :param use_binary_reduction: Whether to use the binary reduction strategy (default: False).
   :param verbose: Whether to enable verbose logging (default: False).
   :param config: Configuration object containing model parameters. If provided, individual parameters are ignored.

   :raises ValueError: If risk_aversion is not between 0 and 1.


   .. py:attribute:: num_money_per_round


   .. py:attribute:: risk_aversion


   .. py:attribute:: use_approximate


   .. py:attribute:: break_tie_by_uniform


   .. py:attribute:: use_binary_reduction


   .. py:attribute:: bootstrap_ci_config


   .. py:attribute:: verbose
      :value: False



   .. py:attribute:: logger


   .. py:attribute:: process_problem_fn


   .. py:method:: fit(problems: List[pm_rank.data.base.ForecastProblem], include_scores: bool = True, include_bootstrap_ci: bool = False, include_per_problem_info: bool = False) -> Tuple[Dict[str, Any], Dict[str, int]] | Dict[str, int]

      Fit the average return model to the given problems.

      This method processes all problems at once and returns the final rankings
      based on average returns across all problems.

      :param problems: List of ForecastProblem instances to process.
      :param include_scores: Whether to include scores in the results (default: True).
      :param include_bootstrap_ci: Whether to include bootstrap confidence intervals in the results (default: False).
      :param include_per_problem_info: Whether to include per-problem info in the results (default: False).

      :returns: Ranking results, either as a tuple of (scores, rankings) or just rankings.
                If include_per_problem_info is True, returns a tuple of (scores, rankings, per_problem_info).



   .. py:method:: fit_stream(problem_iter: Iterator[List[pm_rank.data.base.ForecastProblem]], include_scores: bool = True) -> Dict[int, Tuple[Dict[str, Any], Dict[str, int]] | Dict[str, int]]

      Fit the model to streaming problems and return incremental results.

      This method processes problems as they arrive and returns rankings after each batch,
      allowing for incremental analysis of forecaster performance.

      :param problem_iter: Iterator over batches of ForecastProblem instances.
      :param include_scores: Whether to include scores in the results (default: True).

      :returns: Mapping of batch indices to ranking results.



   .. py:method:: fit_stream_with_timestamp(problem_time_iter: Iterator[Tuple[str, List[pm_rank.data.base.ForecastProblem]]], include_scores: bool = True) -> collections.OrderedDict

      Fit the model to streaming problems with timestamps and return incremental results.

      This method processes problems with associated timestamps and returns rankings
      after each batch, maintaining chronological order.

      :param problem_time_iter: Iterator over (timestamp, problems) tuples.
      :param include_scores: Whether to include scores in the results (default: True).

      :returns: Chronologically ordered mapping of timestamps to ranking results.



   .. py:method:: fit_by_category(problems: List[pm_rank.data.base.ForecastProblem], include_scores: bool = True, stream_with_timestamp: bool = False, stream_increment_by: Literal['day', 'week', 'month'] = 'day', min_bucket_size: int = 1) -> Tuple[Dict[str, Any], Dict[str, int]] | Dict[str, int]

      Fit the average return model to the given problems by category.

      This method processes all problems at once and returns the final rankings
      based on average returns across all problems.

      :param problems: List of ForecastProblem instances to process.
      :param include_scores: Whether to include scores in the results (default: True).
      :param stream_with_timestamp: Whether to stream problems with timestamps (default: False).
      :param stream_increment_by: The increment by which to stream problems (default: "day").
      :param min_bucket_size: The minimum number of problems to include in a bucket (default: 1).



.. py:function:: spearman_correlation(rank_dict_a: Dict[str, int], rank_dict_b: Dict[str, int]) -> float

   Compute the Spearman correlation between two rankings.
   Reference: https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient


.. py:function:: kendall_correlation(rank_dict_a: Dict[str, int], rank_dict_b: Dict[str, int]) -> float

   Compute the Kendall correlation between two rankings.
   Reference: https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient


.. py:class:: CalibrationMetric(num_bins: int = 10, strategy: Literal['uniform', 'quantile'] = 'uniform', weight_event: bool = True, verbose: bool = False)

   
   Initialize the CalibrationMetric.

   :param num_bins: The number of bins to use for discretization.
   :param strategy: The strategy to use for discretization.
   :param weight_event: Whether to weight the event by the number of markets in it. If `False`, then each market will be treated equally.


   .. py:attribute:: num_bins
      :value: 10



   .. py:attribute:: strategy
      :value: 'uniform'



   .. py:attribute:: weight_event
      :value: True



   .. py:attribute:: verbose
      :value: False



   .. py:attribute:: logger


   .. py:method:: fit(problems: List[pm_rank.data.base.ForecastProblem], include_scores: bool = True)

      Fit the calibration metric to the given problems.

      :param problems: List of ForecastProblem instances to process.

      :returns: A dictionary containing the calibration metric.



   .. py:method:: plot(name: str, title: str = 'Reliability diagram', save_path: str = None, figsize: tuple[float, float] = (4, 4), percent: bool = True)


