src.pm_rank.model.average_return
================================

.. py:module:: src.pm_rank.model.average_return

.. autoapi-nested-parse::

   Average Return Model for Prediction Market Ranking.

   This module implements ranking algorithms based on the average returns that forecasters
   can achieve from prediction markets. The model calculates expected earnings based on
   different risk aversion profiles and market odds.

   Note: The forecast problem needs to have the field `odds` in order to use this
   model for evaluation.

   IMPORTANT DEFINITIONS:

   - `implied_probs`: The implied probabilities calculated from the market odds across
     all functions below. In our setting, a $p_i$ implied prob for the outcome $i$ signifies
     that a buy contract will cost $p_i$ dollars and pay out 1 dollar if the outcome is $i$.

   - `number of bets`: The number of contracts (see above) to buy for each outcome.



Classes
-------

.. autoapisummary::

   src.pm_rank.model.average_return.AverageReturnConfig
   src.pm_rank.model.average_return.AverageReturn


Module Contents
---------------

.. py:class:: AverageReturnConfig

   Configuration class for AverageReturn model parameters.

   :param num_money_per_round: Amount of money to bet per round.
   :param risk_aversion: Risk aversion parameter between 0 and 1.
       - 0: Risk neutral
       - 1: Log risk averse  
       - 0 < x < 1: Intermediate risk aversion levels
   :param use_approximate: Whether to use the approximate CRRA betting strategy.
   :param break_tie_by_uniform: When edges are all the same, whether to break tie 
       by spending uniform money on each leg. Only effective when use_approximate is True.
   :param use_binary_reduction: Whether to use the binary reduction strategy.


   .. py:attribute:: num_money_per_round
      :type:  int
      :value: 1



   .. py:attribute:: risk_aversion
      :type:  float
      :value: 0.0



   .. py:attribute:: use_approximate
      :type:  bool
      :value: False



   .. py:attribute:: break_tie_by_uniform
      :type:  bool
      :value: True



   .. py:attribute:: use_binary_reduction
      :type:  bool
      :value: False



   .. py:attribute:: bootstrap_ci_config
      :type:  pm_rank.model.utils.BootstrapCIConfig


   .. py:method:: __post_init__()

      Validate configuration parameters.



   .. py:method:: __getitem__(key)

      Allow dict-like access to config parameters.



   .. py:method:: __setitem__(key, value)

      Allow dict-like setting of config parameters.



   .. py:method:: get(key, default=None)

      Get config parameter with default value.



   .. py:method:: keys()

      Return config parameter names.



   .. py:method:: items()

      Return config parameter name-value pairs.



   .. py:method:: default() -> AverageReturnConfig
      :classmethod:


      Create a default configuration.



.. py:class:: AverageReturn(num_money_per_round: int = None, risk_aversion: float = None, use_approximate: bool = None, break_tie_by_uniform: bool = None, use_binary_reduction: bool = None, verbose: bool = False, config: AverageReturnConfig = None, bootstrap_ci_config: pm_rank.model.utils.BootstrapCIConfig = DEFAULT_BOOTSTRAP_CI_CONFIG)

   Average Return Model for ranking forecasters based on their expected market returns.

   This class implements a ranking algorithm that evaluates forecasters based on how much
   money they could earn from prediction markets using different risk aversion strategies.
   The model calculates expected returns for each forecaster and ranks them accordingly.

   Initialize the AverageReturn model.

   :param num_money_per_round: Amount of money to bet per round (default: 1).
   :param risk_aversion: Risk aversion parameter between 0 and 1 (default: 0.0).
   :param use_approximate: Whether to use the approximate CRRA betting strategy (default: False).
   :param break_tie_by_uniform: When the edges are all the same, 
       whether to break tie by spending uniform money on each leg. Only effective when use_approximate is True (default: True).
   :param use_binary_reduction: Whether to use the binary reduction strategy (default: False).
   :param verbose: Whether to enable verbose logging (default: False).
   :param config: Configuration object containing model parameters. If provided, individual parameters are ignored.

   :raises ValueError: If risk_aversion is not between 0 and 1.


   .. py:attribute:: num_money_per_round


   .. py:attribute:: risk_aversion


   .. py:attribute:: use_approximate


   .. py:attribute:: break_tie_by_uniform


   .. py:attribute:: use_binary_reduction


   .. py:attribute:: bootstrap_ci_config


   .. py:attribute:: verbose
      :value: False



   .. py:attribute:: logger


   .. py:attribute:: process_problem_fn


   .. py:method:: fit(problems: List[pm_rank.data.base.ForecastProblem], sharpe_mode: Literal[None, 'marginal', 'relative'] = None, include_scores: bool = True, include_bootstrap_ci: bool = False, include_per_problem_info: bool = False) -> Tuple[Dict[str, Any], Dict[str, int]] | Dict[str, int]

      Fit the average return model to the given problems.

      This method processes all problems at once and returns the final rankings
      based on average returns across all problems.

      :param problems: List of ForecastProblem instances to process.
      :param sharpe_mode: Whether to return the sharpe ratio (mean over sd). If None, we will return the average (mean) only (default: None).
          If "marginal", we will return the marginal sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings only.
          If "relative", we will return the relative sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings minus the baseline earnings.
      :param include_scores: Whether to include scores in the results (default: True).
      :param include_bootstrap_ci: Whether to include bootstrap confidence intervals in the results (default: False).
      :param include_per_problem_info: Whether to include per-problem info in the results (default: False).

      :returns: Ranking results, either as a tuple of (scores, rankings) or just rankings.
                If include_per_problem_info is True, returns a tuple of (scores, rankings, per_problem_info).



   .. py:method:: fit_stream(problem_iter: Iterator[List[pm_rank.data.base.ForecastProblem]], sharpe_mode: Literal[None, 'marginal', 'relative'] = None, include_scores: bool = True) -> Dict[int, Tuple[Dict[str, Any], Dict[str, int]] | Dict[str, int]]

      Fit the model to streaming problems and return incremental results.

      This method processes problems as they arrive and returns rankings after each batch,
      allowing for incremental analysis of forecaster performance.

      :param problem_iter: Iterator over batches of ForecastProblem instances.
      :param sharpe_mode: Whether to return the sharpe ratio (mean over sd). If None, we will return the average (mean) only (default: None).
          If "marginal", we will return the marginal sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings only.
          If "relative", we will return the relative sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings minus the baseline earnings.
      :param include_scores: Whether to include scores in the results (default: True).

      :returns: Mapping of batch indices to ranking results.



   .. py:method:: fit_stream_with_timestamp(problem_time_iter: Iterator[Tuple[str, List[pm_rank.data.base.ForecastProblem]]], sharpe_mode: Literal[None, 'marginal', 'relative'] = None, include_scores: bool = True) -> collections.OrderedDict

      Fit the model to streaming problems with timestamps and return incremental results.

      This method processes problems with associated timestamps and returns rankings
      after each batch, maintaining chronological order.

      :param problem_time_iter: Iterator over (timestamp, problems) tuples.
      :param sharpe_mode: Whether to return the sharpe ratio (mean over sd). If None, we will return the average (mean) only (default: None).
          If "marginal", we will return the marginal sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings only.
          If "relative", we will return the relative sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings minus the baseline earnings.
      :param include_scores: Whether to include scores in the results (default: True).

      :returns: Chronologically ordered mapping of timestamps to ranking results.



   .. py:method:: fit_by_category(problems: List[pm_rank.data.base.ForecastProblem], sharpe_mode: Literal[None, 'marginal', 'relative'] = None, include_scores: bool = True, stream_with_timestamp: bool = False, stream_increment_by: Literal['day', 'week', 'month'] = 'day', min_bucket_size: int = 1) -> Tuple[Dict[str, Any], Dict[str, int]] | Dict[str, int]

      Fit the average return model to the given problems by category.

      This method processes all problems at once and returns the final rankings
      based on average returns across all problems.

      :param problems: List of ForecastProblem instances to process.
      :param sharpe_mode: Whether to return the sharpe ratio (mean over sd). If None, we will return the average (mean) only (default: None).
          If "marginal", we will return the marginal sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings only.
          If "relative", we will return the relative sharpe ratio, i.e. the sharpe ratio calculated on the forecasters' earnings minus the baseline earnings.
      :param include_scores: Whether to include scores in the results (default: True).
      :param stream_with_timestamp: Whether to stream problems with timestamps (default: False).
      :param stream_increment_by: The increment by which to stream problems (default: "day").
      :param min_bucket_size: The minimum number of problems to include in a bucket (default: 1).



